import org.gradle.api.internal.artifacts.dependencies.DefaultExternalModuleDependency
import com.modrinth.minotaur.TaskModrinthUpload
import com.modrinth.minotaur.request.VersionType

plugins {
    id 'fabric-loom' version '0.8-SNAPSHOT'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'java-library'
    id "com.peterabeles.gversion" version "1.8.3"
    id "com.modrinth.minotaur" version "1.2.1"
}

gversion {
  srcDir = "src/main/java/"
  classPackage = "com.javazilla.bukkitfabric"
  className = "GitVersion"
}
project.compileJava.dependsOn(createVersionFile)

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

configurations { 
    extraLibs
    removeLibs
    metest
}


minecraft {
    accessWidener = file("src/main/resources/bukkitfabric.accesswidener")
}

repositories {
    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url = 'https://oss.sonatype.org/content/repositories/central' }
    maven { url = 'https://jitpack.io' }
    maven { url = 'https://repo.codemc.io/repository/maven-releases/' }
    mavenCentral()
}

configurations.all {
    // Check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    // modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")
    
    // Make a collection of all api modules we wish to use
    Set<String> apiModules = [
    	"fabric-api-base",
    	"fabric-networking-api-v1",
    	"fabric-screen-handler-api-v1"
    ]

    DefaultExternalModuleDependency ic = new DefaultExternalModuleDependency("com.javazilla.mods", "icommon-fabric-1.17", "1.17", null)
    ic.setChanging(true) // Make sure we get the latest version of iCommon

    include(modImplementation(ic))
    //include( project(":cardboard-block-impl") )
    //modImplementation(project(":cardboard-block-impl"))
    //metest project(":cardboard-block-impl")

    // Add each module as a dependency
    apiModules.forEach {
    	include(modImplementation(fabricApi.module(it, "${project.fabric_version}")))
    }

    extraLibs fileTree(dir: 'libs', include: 'commons-lang-2.6.jar')
    extraLibs group: "org.jetbrains", name: "annotations", version: "20.1.0"
    extraLibs group: "com.googlecode.json-simple", name: "json-simple", version: "1.1.1"

    extraLibs("org.yaml:snakeyaml:1.27")

    // 
    compileOnly fileTree(dir: 'libs', include: "${project.paper_jar}")
    compileOnly fileTree(dir: 'libs', include: 'commons-lang-2.6.jar')
    compileOnly fileTree(dir: 'libs', include: 'slf4j.jar')
    compileOnly group: "org.jetbrains", name: "annotations", version: "18.0.0"
    compileOnly group: "com.googlecode.json-simple", name: "json-simple", version: "1.1.1"

    compileOnly 'net.fabricmc:tiny-mappings-parser:0.2.2.14'
	compileOnly 'net.fabricmc:tiny-remapper:0.4.2'
	compileOnly 'net.fabricmc:access-widener:1.0.0'

    // NMS Remapping
    extraLibs group: "com.github.OrionMinecraft", name: "SrgLib", version: "master-SNAPSHOT"
    include(modImplementation("com.github.IsaiahPatton:SpecialSource:master-SNAPSHOT"))

    compileOnly group: "com.github.OrionMinecraft", name: "SrgLib", version: "master-SNAPSHOT"

    // (Optional) Fabric Permissions API.
    // modImplementation "com.javazilla.mods:permissions:1.1"

    // Remove parts that are included with Minecraft or Downloaded
    removeLibs group: "com.google.guava", name: "guava", version: "21.0"
    removeLibs group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'
    removeLibs group: 'org.apache.commons', name: 'commons-collections4', version: '4.2'
    removeLibs group: 'commons-collections', name: 'commons-collections', version: '3.2.2'
    removeLibs group: 'commons-lang', name: 'commons-lang', version: '2.6'
    removeLibs group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
    removeLibs group: 'junit', name: 'junit', version: '4.10'

    configurations.api.extendsFrom(configurations.extraLibs)
    //project.compileJava.dependsOn(configurations.metest)
}

processResources {
    inputs.property "version", project.version

	duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        if(System.env.BUILD_NUMBER){
            expand "version": System.env.BUILD_NUMBER
        }
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

tasks.withType(JavaCompile) { options.encoding = "UTF-8" }

jar {
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from "LICENSE"
    from {
        (configurations.extraLibs - configurations.removeLibs).filter{ it.exists() }.collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude("**/mojang-translations/")
	exclude("*.jar") // WHY GRADLE, WHY?
}

shadowJar {
    configurations = [project.configurations.api]
    dependencies {
      exclude(dependency('com.mojang:minecraft:*'))
      exclude(dependency('org.objectweb:asm:*'))
      exclude(dependency('com.google.guava:guava:*'))
    }
}

task publishModrinth (type: TaskModrinthUpload){ // Make sure it runs after build!
    onlyIf {
        System.getenv("MODRINTH") // Only attempt to run this task if the MODRINTH variable is set, otherwise SKIP it
    }

    token = System.getenv("MODRINTH") // An environment property called MODRINTH that is your token, set via Gradle CLI, GitHub Actions, Idea Run Configuration, or other
    projectId = 'MLYQ9VGP'
    versionType = VersionType.BETA
    versionNumber = '1.17-' + System.env.BUILD_NUMBER // Will fail if Modrinth has this version already
    versionName = '1.17-#' + System.env.BUILD_NUMBER + ' (MC: 1.17.1)'
    // On fabric, use 'remapJar' instead of 'jar'
    uploadFile = remapJar // This is the java jar task. If it can't find the jar, try 'jar.outputs.getFiles().asPath' in place of 'jar' 
    addGameVersion('1.17.1') // Call this multiple times to add multiple game versions. There are tools that can help you generate the list of versions
    addLoader('fabric')
}